/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        thumbcombos_base_left_right {
            bindings = <&caps_word>;
            key-positions = <39 40>;
            layers = <0>;
        };

        thumbcombos_base_right_left {
            bindings = <&lt 4 UNDER>;
            key-positions = <41 42>;
            layers = <0>;
        };

        thumbcombos_base_right_right {
            bindings = <&kp LS(LA(LC(LGUI)))>;
            key-positions = <42 43>;
        };

        qa {
            bindings = <&kp LEFT>;
            key-positions = <12 13>;
        };

        aq {
            bindings = <&kp LBRC>;
            key-positions = <1 13>;
        };

        sw {
            bindings = <&kp RBRC>;
            key-positions = <2 14>;
        };

        de {
            bindings = <&kp LPAR>;
            key-positions = <3 15>;
        };

        fr {
            bindings = <&kp RPAR>;
            key-positions = <4 16>;
        };

        gt {
            bindings = <&kp DLLR>;
            key-positions = <5 17>;
        };

        hy {
            bindings = <&kp EQUAL>;
            key-positions = <6 18>;
        };

        ju {
            bindings = <&kp UP>;
            key-positions = <7 19>;
        };

        ki {
            bindings = <&kp LBKT>;
            key-positions = <8 20>;
        };

        lo {
            bindings = <&kp RBKT>;
            key-positions = <9 21>;
        };

        quotp {
            bindings = <&kp COLON>;
            key-positions = <10 22>;
        };

        pquot {
            bindings = <&kp RIGHT>;
            key-positions = <22 23>;
        };

        fg {
            bindings = <&kp PG_UP>;
            key-positions = <16 17>;
        };

        hj {
            bindings = <&kp PG_DN>;
            key-positions = <18 19>;
        };

        az {
            bindings = <&kp GRAVE>;
            key-positions = <13 25>;
        };

        sx {
            bindings = <&kp TILDE>;
            key-positions = <14 26>;
        };

        dc {
            bindings = <&kp CARET>;
            key-positions = <15 27>;
        };

        fv {
            bindings = <&kp STAR>;
            key-positions = <16 28>;
        };

        gb {
            bindings = <&kp BSLH>;
            key-positions = <17 29>;
        };

        hn {
            bindings = <&kp MINUS>;
            key-positions = <18 31>;
        };

        jm {
            bindings = <&kp DOWN>;
            key-positions = <19 32>;
        };

        kcomm {
            bindings = <&kp PLUS>;
            key-positions = <20 33>;
        };

        ldot {
            bindings = <&kp PIPE>;
            key-positions = <21 34>;
        };

        quotslsh {
            bindings = <&kp SEMI>;
            key-positions = <22 35>;
        };

        bbspc {
            bindings = <&kp LS(LG(TAB))>;
            key-positions = <29 39>;
        };

        nspc {
            bindings = <&kp LG(TAB)>;
            key-positions = <31 42>;
        };
    };

    macros {
        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "ARROW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&bootloader     &lt 3 Q     &kp W       &kp E        &kp R        &kp T                       &kp Y        &kp U        &kp I                  &kp O       &lt 2 P       &bootloader
&kp Q           &mt LGUI A  &mt LALT S  &mt LCTRL D  &mt LSHFT F  &mt RCTRL G                 &mt RCTRL H  &mt LSHFT J  &mt LCTRL K            &mt LALT L  &mt LGUI SQT  &lt 2 P
&mt LSHFT LPAR  &lt 1 Z     &kp X       &kp C        &kp V        &kp B            &kp SPACE  &kp N        &kp M        &kp COMMA              &kp DOT     &kp FSLH      &mt RSHFT RPAR
                            &kp LBKT    &key_repeat  &lt 2 BSPC   &mt LSHFT ENTER             &lt 1 TAB    &lt 3 SPACE  &mt LS(LA(LCTRL)) ESC  &kp RBKT
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN>;
        };

        mouse_layer {
            bindings = <
&none  &none      &none      &none      &none      &bootloader           &kp C_MUTE          &kp LG(N1)         &kp LG(N2)        &kp LG(N3)       &kp C_PP           &none
&none  &none      &none      &none      &none      &none                 &mt RCTRL C_VOL_DN  &mt LSHIFT LG(N4)  &mt LCTRL LG(N5)  &mt LALT LG(N6)  &mt LGUI C_VOL_UP  &none
&none  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LS(LG(Z))  &none  &kp C_PREV          &kp LG(N7)         &kp LG(N8)        &kp LG(N9)       &kp C_NEXT         &none
                  &none      &none      &none      &none                 &none               &none              &none             &none
            >;

            sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
        };

        num_layer {
            bindings = <
&none          &kp LG(GRAVE)  &kp LG(W)        &kp LG(LS(LBKT))  &kp LS(LG(RBKT))  &kp LG(T)            &kp LS(STAR)  &kp N1    &kp N2                 &kp N3  &kp LS(PLUS)   &none
&kp LG(GRAVE)  &mt LGUI LBRC  &mt LALT RBRC    &mt LCTRL LPAR    &mt LSHIFT RPAR   &kp LS(DLLR)         &kp EQUAL     &kp N4    &kp N5                 &kp N6  &kp LS(COLON)  &kp LS(PLUS)
&none          &kp PRCNT      &kp LS(LG(TAB))  &kp LG(TAB)       &caps_word        &caps_word    &none  &kp COMMA     &kp N7    &kp N8                 &kp N9  &kp FSLH       &none
                              &none            &kp ESC           &kp BSPC          &kp RET              &lt 4 MINUS   &lt 3 N0  &mt LS(LA(LCTRL)) DOT  &none
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
        };

        sym_layer {
            bindings = <
&none          &kp LS(TILDE)  &kp LS(CARET)  &kp UP             &kp LS(PRCNT)     &kp LG(LBKT)         &kp LG(RBKT)    &kp LS(EXCL)          &kp LS(AT)      &kp LS(POUND)  &arrow         &none
&kp LS(TILDE)  &kp GRAVE      &kp LEFT       &kp DOWN           &kp RIGHT         &kp BSLH             &mt RCTRL STAR  &mt LS(LSHIFT) UNDER  &mt LCTRL LBKT  &mt LALT RBKT  &mt LGUI SEMI  &arrow
&none          &kp LS(AMPS)   &kp LS(LA(X))  &kp LS(LA(MINUS))  &kp LS(LA(BSLH))  &caps_word    &none  &kp HOME        &kp PG_DN             &kp PG_UP       &kp END        &kp LS(PIPE)   &none
                              &none          &key_repeat        &kp BSPC          &kp DEL              &none           &none                 &none           &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        fun_layer {
            bindings = <
&none     &kp CAPS      &kp F10       &kp F11       &kp F12       &caps_word           &none  &kp F1  &kp F2  &kp F3  &none  &none
&kp CAPS  &kp LGUI      &kp LALT      &kp LCTRL     &kp LSHFT     &kp RCTRL            &none  &kp F4  &kp F5  &kp F6  &none  &none
&none     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none  &none  &kp F7  &kp F8  &kp F9  &none  &none
                        &none         &bt BT_CLR    &none         &none                &none  &none   &none   &none
            >;

            sensor-bindings = <&inc_dec_kp U LC(R)>;
        };
    };
};
